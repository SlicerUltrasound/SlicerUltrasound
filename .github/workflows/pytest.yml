name: Run Slicer Module Tests

# Trigger the workflow on pull requests to the main branch
on:
  pull_request:
    branches: [main]

jobs:
  # Job 1: Basic pytest tests (fastest, runs first)
  test-pytest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Slicer
        run: |
          # Download and install Slicer 5.8.1
          wget https://download.slicer.org/bitstream/67c51fc129825655577cfee9 -O Slicer-5.8.1-linux-amd64.tar.gz
          tar xzvf Slicer-5.8.1-linux-amd64.tar.gz
          export SLICER_HOME=$PWD/Slicer-5.8.1-linux-amd64
          echo "SLICER_HOME=$SLICER_HOME" >> $GITHUB_ENV

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Run pytest tests
        run: |
          make test-pytest

      - name: Upload pytest coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: pytest
          name: codecov-pytest
          fail_ci_if_error: false

  # Job 2: Module installation test
  test-installation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Slicer
        run: |
          # Download and install Slicer 5.8.1
          wget https://download.slicer.org/bitstream/67c51fc129825655577cfee9 -O Slicer-5.8.1-linux-amd64.tar.gz
          tar xzvf Slicer-5.8.1-linux-amd64.tar.gz
          export SLICER_HOME=$PWD/Slicer-5.8.1-linux-amd64
          echo "SLICER_HOME=$SLICER_HOME" >> $GITHUB_ENV

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Test module installation
        run: |
          # Test that modules can be installed into Slicer
          extension_dir=$SLICER_HOME/lib/Slicer-5.8/qt-scripted-modules

          # Copy the module directories
          modules=("AnnotateUltrasound" "AnonymizeUltrasound" "MmodeAnalysis" "TimeSeriesAnnotation")
          for module in "${modules[@]}"; do
            if [ -d "$module" ]; then
              target_dir="$extension_dir/$module"
              echo "Testing installation of $module to $target_dir"

              # Remove existing directory if it exists
              if [ -d "$target_dir" ]; then
                rm -rf "$target_dir"
              fi

              # Copy the module
              cp -r "$module" "$target_dir"

              # Verify installation
              if [ -f "$target_dir/${module}.py" ]; then
                echo "✓ $module installed successfully"
              else
                echo "✗ $module installation failed"
                exit 1
              fi
            fi
          done

      - name: Test module loading
        run: |
          # Create a temporary Python script for module loading test
          cat > test_module_loading.py << 'EOF'
          import sys
          import os

          # Add Slicer extension path
          slicer_home = os.environ.get('SLICER_HOME')
          if slicer_home:
              extension_path = os.path.join(slicer_home, 'lib', 'Slicer-5.8', 'qt-scripted-modules')
              sys.path.append(extension_path)

          # Test importing each module
          modules = ['AnnotateUltrasound', 'AnonymizeUltrasound', 'MmodeAnalysis', 'TimeSeriesAnnotation']
          for module in modules:
              try:
                  __import__(module)
                  print(f'✓ {module} imported successfully')
              except Exception as e:
                  print(f'✗ Failed to import {module}: {e}')
                  sys.exit(1)
          print('✓ All modules imported successfully')
          EOF

          # Run the module loading test
          $SLICER_HOME/bin/PythonSlicer test_module_loading.py

  # Job 3: Tests with coverage (most comprehensive)
  test-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Slicer
        run: |
          # Download and install Slicer 5.8.1
          wget https://download.slicer.org/bitstream/67c51fc129825655577cfee9 -O Slicer-5.8.1-linux-amd64.tar.gz
          tar xzvf Slicer-5.8.1-linux-amd64.tar.gz
          export SLICER_HOME=$PWD/Slicer-5.8.1-linux-amd64
          echo "SLICER_HOME=$SLICER_HOME" >> $GITHUB_ENV

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Run tests with coverage
        run: |
          make test-coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: coverage
          name: codecov-coverage
          fail_ci_if_error: false

  # Job 4: GUI tests with virtual display
  test-gui:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Slicer
        run: |
          # Download and install Slicer 5.8.1
          wget https://download.slicer.org/bitstream/67c51fc129825655577cfee9 -O Slicer-5.8.1-linux-amd64.tar.gz
          tar xzvf Slicer-5.8.1-linux-amd64.tar.gz
          export SLICER_HOME=$PWD/Slicer-5.8.1-linux-amd64
          echo "SLICER_HOME=$SLICER_HOME" >> $GITHUB_ENV

      - name: Install build dependencies and X11
        run: |
          sudo apt-get update
          # Install essential packages that are definitely available
          sudo apt-get install -y cmake build-essential xvfb x11-utils

          # Install OpenGL and X11 packages with correct names
          sudo apt-get install -y \
            libgl1-mesa-glx libglu1-mesa \
            libxrandr2 libxinerama1 libxcursor1 libxi6 \
            libfontconfig1 libxext6 libxrender1 \
            libxtst6 libgtk-3-0 || echo "Some packages failed, trying alternatives..."

          # Install Qt and XCB dependencies for Qt platform plugins
          sudo apt-get install -y \
            libxcb1 libxcb-xfixes0-dev libxcb-shape0 libxcb-render0 libxcb-render-util0 \
            libxcb-keysyms1 libxcb-icccm4 libxcb-image0 libxcb-shm0 libxcb-util1 \
            libxcb-xinerama0 libxcb-xkb1 libxkbcommon-x11-0 || echo "Some XCB packages failed, continuing..."

          # Install PulseAudio libraries for audio support
          sudo apt-get install -y \
            pulseaudio libpulse-mainloop-glib0 libpulse0 || echo "PulseAudio packages failed, continuing..."

      - name: Install additional dependencies if needed
        run: |
          # Try alternative package names and install missing libraries
          echo "Checking for missing OpenGL libraries..."

          # Check if libGLU.so.1 exists
          if ! ldconfig -p | grep -q libGLU.so.1; then
            echo "libGLU.so.1 not found, trying to install..."
            # Try different package names for libGLU
            sudo apt-get install -y libglu1-mesa-dev || \
            sudo apt-get install -y libglu1-mesa || \
            echo "Could not install libGLU, will try to find existing library..."
          fi

          # Try to install additional packages that might be needed
          for package in libgl1-mesa-dri libxss1 libasound2 libdbus-1-3 libatspi2.0-0 libdrm2 libgbm1; do
            echo "Trying to install $package..."
            sudo apt-get install -y $package || echo "Failed to install $package, continuing..."
          done

          # Show what OpenGL libraries are available
          echo "Available OpenGL libraries:"
          ldconfig -p | grep -E "(libGL|libGLU)" || echo "No OpenGL libraries found"

      - name: Fix OpenGL library links
        run: |
          # Create symbolic links for OpenGL libraries if needed
          echo "Checking for OpenGL library alternatives..."

          # Check for libGLU alternatives
          if ! ldconfig -p | grep -q libGLU.so.1; then
            echo "Looking for libGLU alternatives..."
            GLU_LIBS=$(find /usr/lib* -name "libGLU.so*" 2>/dev/null | head -1)
            if [ -n "$GLU_LIBS" ]; then
              echo "Found GLU library: $GLU_LIBS"
              # Create symbolic link if needed
              sudo ln -sf "$GLU_LIBS" /usr/lib/x86_64-linux-gnu/libGLU.so.1 || echo "Could not create symlink"
            fi
          fi

          # Check for libGL alternatives
          if ! ldconfig -p | grep -q libGL.so.1; then
            echo "Looking for libGL alternatives..."
            GL_LIBS=$(find /usr/lib* -name "libGL.so*" 2>/dev/null | head -1)
            if [ -n "$GL_LIBS" ]; then
              echo "Found GL library: $GL_LIBS"
              # Create symbolic link if needed
              sudo ln -sf "$GL_LIBS" /usr/lib/x86_64-linux-gnu/libGL.so.1 || echo "Could not create symlink"
            fi
          fi

          # Update library cache
          sudo ldconfig

          echo "Final OpenGL library check:"
          ldconfig -p | grep -E "(libGL|libGLU)" || echo "Still no OpenGL libraries found"

      - name: Debug Slicer installation
        run: |
          echo "SLICER_HOME: $SLICER_HOME"
          echo "Slicer installation structure:"
          ls -la $SLICER_HOME/
          echo "Slicer bin directory:"
          ls -la $SLICER_HOME/bin/
          echo "Checking for Slicer executable:"
          find $SLICER_HOME -name "Slicer" -type f 2>/dev/null || echo "No Slicer executable found"

          echo "Checking Qt platform plugins:"
          find $SLICER_HOME -name "*platforms*" -type d 2>/dev/null || echo "No platforms directory found"
          find $SLICER_HOME -name "libqxcb.so" 2>/dev/null || echo "No xcb platform plugin found"

          echo "Checking XCB libraries:"
          ldconfig -p | grep xcb || echo "No XCB libraries found"

      - name: Start virtual display
        run: |
          # Start Xvfb on display :99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> $GITHUB_ENV
          sleep 2  # Give Xvfb time to start

          # Set OpenGL environment variables for headless mode
          echo "LIBGL_ALWAYS_SOFTWARE=1" >> $GITHUB_ENV
          echo "MESA_GL_VERSION_OVERRIDE=3.3" >> $GITHUB_ENV
          echo "MESA_GLSL_VERSION_OVERRIDE=330" >> $GITHUB_ENV

          # Set Qt environment variables for headless mode
          echo "QT_QPA_PLATFORM=xcb" >> $GITHUB_ENV
          echo "QT_X11_NO_MITSHM=1" >> $GITHUB_ENV
          echo "QT_DEBUG_PLUGINS=1" >> $GITHUB_ENV  # Enable Qt plugin debugging

          # Set audio environment variables to avoid PulseAudio issues
          echo "PULSE_SERVER=unix:/tmp/pulse-socket" >> $GITHUB_ENV
          echo "PULSE_COOKIE=/tmp/pulse-cookie" >> $GITHUB_ENV
          echo "ALSA_PCM_CARD=-2" >> $GITHUB_ENV  # Disable ALSA
          echo "ALSA_PCM_DEVICE=-2" >> $GITHUB_ENV  # Disable ALSA

          # Start dummy PulseAudio server if available
          if command -v pulseaudio >/dev/null 2>&1; then
            echo "Starting dummy PulseAudio server..."
            pulseaudio --start --log-level=4 --log-target=stderr --exit-idle-time=-1 --file=/dev/null &
            sleep 2
          else
            echo "PulseAudio not available, using dummy audio setup"
          fi

          # Set Qt plugin path if platforms directory exists
          PLATFORMS_DIR=$(find $SLICER_HOME -name "*platforms*" -type d 2>/dev/null | head -1)
          if [ -n "$PLATFORMS_DIR" ]; then
            echo "Found Qt platforms directory: $PLATFORMS_DIR"
            echo "QT_PLUGIN_PATH=$PLATFORMS_DIR" >> $GITHUB_ENV
          else
            echo "No Qt platforms directory found in Slicer installation"
          fi

      - name: Run GUI tests
        run: |
          # Run GUI tests with virtual display
          make test-gui

      - name: Run DICOM loading tests
        run: |
          # Run DICOM loading tests with virtual display
          make test-dicom
